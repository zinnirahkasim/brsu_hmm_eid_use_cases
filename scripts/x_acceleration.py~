#!/usr/bin/env python
import roslib; roslib.load_manifest('kee_use_cases')
import rospy
import math
import yaml
#from std_msgs.msg import String
from std_msgs.msg import *
from nav_msgs.msg import Odometry
from geometry_msgs.msg import *


class store_vel_init:
    def __init__(self, *args):
        for each in args:
            self.vel_init= each
            print self.vel_init
        
    def write_file(self):
        #amount = raw_input("How many objects would you like to spawn? ")
        vel_init_file = open('/home/zinnirah/ros/workspace/kee_use_cases/objects/vel_init.yaml', 'w')
        vel_init_details = {'vel_init': [self.vel_init]}
        yaml.dump(vel_init_details,vel_init_file)
        vel_init_file.close()

    def read_file(self):
        read_yaml_file = open('/home/zinnirah/ros/workspace/kee_use_cases/objects/vel_init.yaml', 'r')
        pass_velocity_init = yaml.load(read_yaml_file)
        #rospy.set_param("/simulation/random_objects/", yaml.load(read_yaml_file))
        print pass_velocity_init
        read_yaml_file.close()
        return pass_velocity_init
    
def callback(msg):
    rospy.loginfo("Received actual forward velocity <</odom>> message! The value is %f" %msg.twist.twist.linear.x)
    if rospy.Time.now() == 0:
        vel_init = msg.twist.twist.linear.x
        print vel_init
        #store_vel_init.write_file(vel_init) #?
    else:
        #how do i get the the vel_init?
        #vel_init = store_vel_init.read_file()
        vel_last = msg.twist.twist.linear.x
        print vel_last
        #acceleration = (vel_last - vel_init)/4
        #talker(acceleration)
        #store_vel_init.write_file(vel_last)
    

def talker(acc):
    rospy.loginfo("x_acceleration: %f"%acc)
    pub = rospy.Publisher('x_acceleration', Float64 )
    pub.publish(acc)
    
def listener():
    rospy.Subscriber("odom", Odometry, callback)
    
if __name__ == '__main__':
    rospy.init_node('x_acceleration', anonymous=True)
    while not rospy.is_shutdown():
        try:
            listener()
            rospy.sleep(4)
        except rospy.ROSInterruptException:
            pass